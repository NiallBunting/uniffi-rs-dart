{%- let cbi = ci|get_callback_interface_definition(name) %}
{%- let callback_handler_class = format!("UniffiCallbackInterface{}", name) %}
{%- let callback_handler_obj = format!("uniffiCallbackInterface{}", name) %}
{%- let ffi_init_callback = cbi.ffi_init_callback() %}
{%- let protocol_name = type_name.clone() %}
{%- let methods = cbi.methods() %}

{% include "Protocol.dart" %}
{% include "CallbackInterfaceImpl.dart" %}

// The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.

// Generated by CallbackInterfaceTemplate
class {{ ffi_converter_name }} extends _UniffiCallbackInterfaceFfiConverter {

  static final {{ callback_handler_obj }} = NativeCallable<_UniffiCallbackHandlerTypedef>.listener({{callback_handler_class}});
  static bool {{ callback_handler_obj }}Set = false;

  {{ ffi_converter_name }}() {
    if({{callback_handler_obj}}Set == false) {
      print("Setting: {{ ffi_init_callback.name() }}");
      print({{callback_handler_obj}}.nativeFunction.address);
      _UniffiLib_{{ ffi_init_callback.name() }}_func({{ callback_handler_obj }}.nativeFunction);
      {{callback_handler_obj}}Set = true;
    }
  }

  read(_UniffiRustBufferBuilder buf) {
     // u64
     return buf;
  }

  write(_UniffiRustBufferBuilder buf, value) {
     // u64
     return buf;
  }
}
